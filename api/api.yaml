openapi: 3.0.0
info:
  title: Crawl API
  description: API for managing music albums, songs, users, and purchases.
  version: 1.0.0
paths:

  /login:
    post:
      summary: User login
      operationId: userLogin
      requestBody:
        description: User login credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful, returns user info and token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized, invalid credentials
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: User creation data
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                confirm_password:
                  type: string
              required:
                - first_name
                - last_name
                - username
                - email
                - password
                - confirm_password
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request, validation error

  /users/{userId}:
    get:
      summary: Get user details
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      summary: Update user details
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: User update data
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - first_name
                - last_name
                - email
                - password
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request, validation error

    delete:
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Bad request

  /albums:
    post:
      summary: Create a new album
      operationId: createAlbum
      requestBody:
        description: Album data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
      responses:
        '201':
          description: Album created successfully

    get:
      summary: Get all albums
      operationId: getAllAlbums
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            description: The number of albums to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            description: The number of albums to skip for pagination
      responses:
        '200':
          description: List of albums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'

  /albums/{albumId}:
    get:
      summary: Get details of a specific album
      operationId: getAlbum
      parameters:
        - name: albumId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Album details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'

    put:
      summary: Update album details
      operationId: updateAlbum
      parameters:
        - name: albumId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Album update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
      responses:
        '200':
          description: Album updated successfully

    delete:
      summary: Delete album
      operationId: deleteAlbum
      parameters:
        - name: albumId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Album deleted successfully

  /albums/{albumId}/songs:
    get:
      summary: Get all songs in an album
      operationId: getSongsInAlbum
      parameters:
        - name: albumId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            description: The number of songs to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            description: The number of songs to skip for pagination
      responses:
        '200':
          description: List of songs in the album
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'

  /songs:
    post:
      summary: Create a new song
      operationId: createSong
      requestBody:
        description: Song data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
      responses:
        '201':
          description: Song created successfully

    get:
      summary: Get all songs
      operationId: getAllSongs
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            description: The number of songs to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            description: The number of songs to skip for pagination
      responses:
        '200':
          description: List of all songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'

  /songs/{songId}:
    get:
      summary: Get details of a specific song
      operationId: getSong
      parameters:
        - name: songId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Song details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'

    put:
      summary: Update song details
      operationId: updateSong
      parameters:
        - name: songId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Song update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
      responses:
        '200':
          description: Song updated successfully

    delete:
      summary: Delete song
      operationId: deleteSong
      parameters:
        - name: songId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Song deleted successfully

  /purchases/songs/{userId}:
    get:
      summary: Get all purchased songs by a user
      operationId: getPurchasedSongs
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            description: The number of songs to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            description: The number of songs to skip for pagination
      responses:
        '200':
          description: List of purchased songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'

  /purchases/albums/{userId}:
    get:
      summary: Get all purchased albums by a user
      operationId: getPurchasedAlbums
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            description: The number of albums to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            description: The number of albums to skip for pagination
      responses:
        '200':
          description: List of purchased albums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'

  /songs/search:
    get:
      summary: Search songs by title, artist, or genre
      operationId: searchSongs
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            description: The number of songs to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            description: The number of songs to skip for pagination
      responses:
        '200':
          description: List of matching songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'

  /artists/{artistId}/songs:
    get:
      summary: Get all songs by a specific artist
      operationId: getArtistSongs
      parameters:
        - name: artistId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            description: The number of songs to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            description: The number of songs to skip for pagination
      responses:
        '200':
          description: List of songs by the artist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'

  /artists/{artistId}/albums:
    get:
      summary: Get all albums by a specific artist
      operationId: getArtistAlbums
      parameters:
        - name: artistId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            description: The number of albums to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            description: The number of albums to skip for pagination
      responses:
        '200':
          description: List of albums by the artist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'

  /artists/{artistId}/dashboard:
    get:
      summary: Get artist's dashboard data
      operationId: getArtistDashboard
      parameters:
        - name: artistId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Artist dashboard data
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_songs_uploaded:
                    type: integer
                  total_purchases:
                    type: integer
                  revenue_this_month:
                    type: number
                    format: float
                  revenue_all_time:
                    type: number
                    format: float
                  latest_song_update:
                    $ref: '#/components/schemas/Song'
                  new_purchases:
                    type: array
                    items:
                      $ref: '#/components/schemas/Purchase'

  /artists/{artistId}/revenue-dashboard:
    get:
      summary: Get artist's revenue metrics
      operationId: getArtistRevenueDashboard
      parameters:
        - name: artistId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Artist revenue dashboard data
          content:
            application/json:
              schema:
                type: object
                properties:
                  revenue_this_month:
                    type: number
                    format: float
                  revenue_all_time:
                    type: number
                    format: float
                  top_performing_songs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Song'
                  tips_received:
                    type: number
                    format: float
                  tips_received_this_month:
                    type: number
                    format: float
                  recent_tips:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tip'


components:
  schemas:
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        artist_id:
          type: string
          format: uuid
        artist_name:
          type: array
          items:
            type: string
        price:
          type: number
          format: float
        release_date:
          type: string
          format: date
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'

    Song:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        artist_id:
          type: string
          format: uuid
          nullable: true
        artists_names:
          type: array
          items:
            type: string
        genre:
          type: string
        price:
          type: number
          format: float
          nullable: true
        duration:
          type: integer
          description: Duration of the song in seconds
          nullable: true
        audio_url:
          type: string
          description: URL to the song's audio file
        release_date:
          type: string
          format: date-time
          nullable: true
        album_id:
          type: string
          format: uuid
          nullable: true
        is_purchased:
          type: boolean
          description: Indicates if the song is purchased
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
      required:
        - id
        - title
        - artist_id
        - artists_names
        - genre
        - price
        - duration
        - release_date
        - created_at
        - updated_at
        - is_purchased


    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        confirm_password:
          type: string
        role:
          type: string
          enum:
            - listener
            - artist

    Purchase:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        song_id:
          type: string
          format: uuid
        album_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Tip:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        artist_id:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        message:
          type: string

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    Error:
      type: object
      required:
        - message
        - error_code
      properties:
        error_code:
          type: string
        message:
          type: string
  responses:
        BadRequestError:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        InternalServerError:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        NotFound:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
security:
    - BearerAuth: [ ]
