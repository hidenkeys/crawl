// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for UserRole.
const (
	Artist   UserRole = "artist"
	Listener UserRole = "listener"
)

// Album defines model for Album.
type Album struct {
	ArtistId    *openapi_types.UUID `json:"artist_id,omitempty"`
	ArtistName  *[]string           `json:"artist_name,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Price       *float32            `json:"price,omitempty"`
	ReleaseDate *openapi_types.Date `json:"release_date,omitempty"`
	Songs       *[]Song             `json:"songs,omitempty"`
	Title       *string             `json:"title,omitempty"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token *string `json:"token,omitempty"`
	User  *User   `json:"user,omitempty"`
}

// Purchase defines model for Purchase.
type Purchase struct {
	AlbumId   *openapi_types.UUID `json:"album_id,omitempty"`
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	SongId    *openapi_types.UUID `json:"song_id,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
	UserId    *openapi_types.UUID `json:"user_id,omitempty"`
}

// Song defines model for Song.
type Song struct {
	AlbumId     *openapi_types.UUID `json:"album_id,omitempty"`
	ArtistId    *openapi_types.UUID `json:"artist_id,omitempty"`
	ArtistNames *[]string           `json:"artist_names,omitempty"`
	Genre       *string             `json:"genre,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Price       *float32            `json:"price,omitempty"`
	ReleaseDate *openapi_types.Date `json:"release_date,omitempty"`
	Title       *string             `json:"title,omitempty"`
}

// Tip defines model for Tip.
type Tip struct {
	Amount   *float32            `json:"amount,omitempty"`
	ArtistId *openapi_types.UUID `json:"artist_id,omitempty"`
	Id       *openapi_types.UUID `json:"id,omitempty"`
	Message  *string             `json:"message,omitempty"`
	UserId   *openapi_types.UUID `json:"user_id,omitempty"`
}

// User defines model for User.
type User struct {
	ConfirmPassword *string             `json:"confirm_password,omitempty"`
	Email           *string             `json:"email,omitempty"`
	FirstName       *string             `json:"first_name,omitempty"`
	Id              *openapi_types.UUID `json:"id,omitempty"`
	LastName        *string             `json:"last_name,omitempty"`
	Password        *string             `json:"password,omitempty"`
	Role            *UserRole           `json:"role,omitempty"`
	Username        *string             `json:"username,omitempty"`
}

// UserRole defines model for User.Role.
type UserRole string

// UserLoginJSONBody defines parameters for UserLogin.
type UserLoginJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// SearchSongsParams defines parameters for SearchSongs.
type SearchSongsParams struct {
	Query string `form:"query" json:"query"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	ConfirmPassword string `json:"confirm_password"`
	Email           string `json:"email"`
	FirstName       string `json:"first_name"`
	LastName        string `json:"last_name"`
	Password        string `json:"password"`
	Username        string `json:"username"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Password  string `json:"password"`
}

// CreateAlbumJSONRequestBody defines body for CreateAlbum for application/json ContentType.
type CreateAlbumJSONRequestBody = Album

// UpdateAlbumJSONRequestBody defines body for UpdateAlbum for application/json ContentType.
type UpdateAlbumJSONRequestBody = Album

// UserLoginJSONRequestBody defines body for UserLogin for application/json ContentType.
type UserLoginJSONRequestBody UserLoginJSONBody

// CreateSongJSONRequestBody defines body for CreateSong for application/json ContentType.
type CreateSongJSONRequestBody = Song

// UpdateSongJSONRequestBody defines body for UpdateSong for application/json ContentType.
type UpdateSongJSONRequestBody = Song

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all albums
	// (GET /albums)
	GetAllAlbums(c *fiber.Ctx) error
	// Create a new album
	// (POST /albums)
	CreateAlbum(c *fiber.Ctx) error
	// Delete album
	// (DELETE /albums/{albumId})
	DeleteAlbum(c *fiber.Ctx, albumId openapi_types.UUID) error
	// Get details of a specific album
	// (GET /albums/{albumId})
	GetAlbum(c *fiber.Ctx, albumId openapi_types.UUID) error
	// Update album details
	// (PUT /albums/{albumId})
	UpdateAlbum(c *fiber.Ctx, albumId openapi_types.UUID) error
	// Get all songs in an album
	// (GET /albums/{albumId}/songs)
	GetSongsInAlbum(c *fiber.Ctx, albumId openapi_types.UUID) error
	// Get all albums by a specific artist
	// (GET /artists/{artistId}/albums)
	GetArtistAlbums(c *fiber.Ctx, artistId openapi_types.UUID) error
	// Get artist's dashboard data
	// (GET /artists/{artistId}/dashboard)
	GetArtistDashboard(c *fiber.Ctx, artistId openapi_types.UUID) error
	// Get artist's revenue metrics
	// (GET /artists/{artistId}/revenue-dashboard)
	GetArtistRevenueDashboard(c *fiber.Ctx, artistId openapi_types.UUID) error
	// Get all songs by a specific artist
	// (GET /artists/{artistId}/songs)
	GetArtistSongs(c *fiber.Ctx, artistId openapi_types.UUID) error
	// User login
	// (POST /login)
	UserLogin(c *fiber.Ctx) error
	// Get all purchased albums by a user
	// (GET /purchases/albums/{userId})
	GetPurchasedAlbums(c *fiber.Ctx, userId openapi_types.UUID) error
	// Get all purchased songs by a user
	// (GET /purchases/songs/{userId})
	GetPurchasedSongs(c *fiber.Ctx, userId openapi_types.UUID) error
	// Get all songs
	// (GET /songs)
	GetAllSongs(c *fiber.Ctx) error
	// Create a new song
	// (POST /songs)
	CreateSong(c *fiber.Ctx) error
	// Search songs by title, artist, or genre
	// (GET /songs/search)
	SearchSongs(c *fiber.Ctx, params SearchSongsParams) error
	// Delete song
	// (DELETE /songs/{songId})
	DeleteSong(c *fiber.Ctx, songId openapi_types.UUID) error
	// Get details of a specific song
	// (GET /songs/{songId})
	GetSong(c *fiber.Ctx, songId openapi_types.UUID) error
	// Update song details
	// (PUT /songs/{songId})
	UpdateSong(c *fiber.Ctx, songId openapi_types.UUID) error
	// Create a new user
	// (POST /users)
	CreateUser(c *fiber.Ctx) error
	// Delete user
	// (DELETE /users/{userId})
	DeleteUser(c *fiber.Ctx, userId openapi_types.UUID) error
	// Get user details
	// (GET /users/{userId})
	GetUser(c *fiber.Ctx, userId openapi_types.UUID) error
	// Update user details
	// (PUT /users/{userId})
	UpdateUser(c *fiber.Ctx, userId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetAllAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAllAlbums(c *fiber.Ctx) error {

	return siw.Handler.GetAllAlbums(c)
}

// CreateAlbum operation middleware
func (siw *ServerInterfaceWrapper) CreateAlbum(c *fiber.Ctx) error {

	return siw.Handler.CreateAlbum(c)
}

// DeleteAlbum operation middleware
func (siw *ServerInterfaceWrapper) DeleteAlbum(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "albumId" -------------
	var albumId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "albumId", c.Params("albumId"), &albumId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter albumId: %w", err).Error())
	}

	return siw.Handler.DeleteAlbum(c, albumId)
}

// GetAlbum operation middleware
func (siw *ServerInterfaceWrapper) GetAlbum(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "albumId" -------------
	var albumId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "albumId", c.Params("albumId"), &albumId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter albumId: %w", err).Error())
	}

	return siw.Handler.GetAlbum(c, albumId)
}

// UpdateAlbum operation middleware
func (siw *ServerInterfaceWrapper) UpdateAlbum(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "albumId" -------------
	var albumId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "albumId", c.Params("albumId"), &albumId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter albumId: %w", err).Error())
	}

	return siw.Handler.UpdateAlbum(c, albumId)
}

// GetSongsInAlbum operation middleware
func (siw *ServerInterfaceWrapper) GetSongsInAlbum(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "albumId" -------------
	var albumId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "albumId", c.Params("albumId"), &albumId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter albumId: %w", err).Error())
	}

	return siw.Handler.GetSongsInAlbum(c, albumId)
}

// GetArtistAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetArtistAlbums(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "artistId" -------------
	var artistId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "artistId", c.Params("artistId"), &artistId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter artistId: %w", err).Error())
	}

	return siw.Handler.GetArtistAlbums(c, artistId)
}

// GetArtistDashboard operation middleware
func (siw *ServerInterfaceWrapper) GetArtistDashboard(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "artistId" -------------
	var artistId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "artistId", c.Params("artistId"), &artistId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter artistId: %w", err).Error())
	}

	return siw.Handler.GetArtistDashboard(c, artistId)
}

// GetArtistRevenueDashboard operation middleware
func (siw *ServerInterfaceWrapper) GetArtistRevenueDashboard(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "artistId" -------------
	var artistId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "artistId", c.Params("artistId"), &artistId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter artistId: %w", err).Error())
	}

	return siw.Handler.GetArtistRevenueDashboard(c, artistId)
}

// GetArtistSongs operation middleware
func (siw *ServerInterfaceWrapper) GetArtistSongs(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "artistId" -------------
	var artistId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "artistId", c.Params("artistId"), &artistId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter artistId: %w", err).Error())
	}

	return siw.Handler.GetArtistSongs(c, artistId)
}

// UserLogin operation middleware
func (siw *ServerInterfaceWrapper) UserLogin(c *fiber.Ctx) error {

	return siw.Handler.UserLogin(c)
}

// GetPurchasedAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetPurchasedAlbums(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "userId", c.Params("userId"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	return siw.Handler.GetPurchasedAlbums(c, userId)
}

// GetPurchasedSongs operation middleware
func (siw *ServerInterfaceWrapper) GetPurchasedSongs(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "userId", c.Params("userId"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	return siw.Handler.GetPurchasedSongs(c, userId)
}

// GetAllSongs operation middleware
func (siw *ServerInterfaceWrapper) GetAllSongs(c *fiber.Ctx) error {

	return siw.Handler.GetAllSongs(c)
}

// CreateSong operation middleware
func (siw *ServerInterfaceWrapper) CreateSong(c *fiber.Ctx) error {

	return siw.Handler.CreateSong(c)
}

// SearchSongs operation middleware
func (siw *ServerInterfaceWrapper) SearchSongs(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchSongsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "query" -------------

	if paramValue := c.Query("query"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument query is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "query", query, &params.Query)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter query: %w", err).Error())
	}

	return siw.Handler.SearchSongs(c, params)
}

// DeleteSong operation middleware
func (siw *ServerInterfaceWrapper) DeleteSong(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "songId" -------------
	var songId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "songId", c.Params("songId"), &songId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter songId: %w", err).Error())
	}

	return siw.Handler.DeleteSong(c, songId)
}

// GetSong operation middleware
func (siw *ServerInterfaceWrapper) GetSong(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "songId" -------------
	var songId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "songId", c.Params("songId"), &songId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter songId: %w", err).Error())
	}

	return siw.Handler.GetSong(c, songId)
}

// UpdateSong operation middleware
func (siw *ServerInterfaceWrapper) UpdateSong(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "songId" -------------
	var songId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "songId", c.Params("songId"), &songId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter songId: %w", err).Error())
	}

	return siw.Handler.UpdateSong(c, songId)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *fiber.Ctx) error {

	return siw.Handler.CreateUser(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "userId", c.Params("userId"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	return siw.Handler.DeleteUser(c, userId)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "userId", c.Params("userId"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	return siw.Handler.GetUser(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "userId", c.Params("userId"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	return siw.Handler.UpdateUser(c, userId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/albums", wrapper.GetAllAlbums)

	router.Post(options.BaseURL+"/albums", wrapper.CreateAlbum)

	router.Delete(options.BaseURL+"/albums/:albumId", wrapper.DeleteAlbum)

	router.Get(options.BaseURL+"/albums/:albumId", wrapper.GetAlbum)

	router.Put(options.BaseURL+"/albums/:albumId", wrapper.UpdateAlbum)

	router.Get(options.BaseURL+"/albums/:albumId/songs", wrapper.GetSongsInAlbum)

	router.Get(options.BaseURL+"/artists/:artistId/albums", wrapper.GetArtistAlbums)

	router.Get(options.BaseURL+"/artists/:artistId/dashboard", wrapper.GetArtistDashboard)

	router.Get(options.BaseURL+"/artists/:artistId/revenue-dashboard", wrapper.GetArtistRevenueDashboard)

	router.Get(options.BaseURL+"/artists/:artistId/songs", wrapper.GetArtistSongs)

	router.Post(options.BaseURL+"/login", wrapper.UserLogin)

	router.Get(options.BaseURL+"/purchases/albums/:userId", wrapper.GetPurchasedAlbums)

	router.Get(options.BaseURL+"/purchases/songs/:userId", wrapper.GetPurchasedSongs)

	router.Get(options.BaseURL+"/songs", wrapper.GetAllSongs)

	router.Post(options.BaseURL+"/songs", wrapper.CreateSong)

	router.Get(options.BaseURL+"/songs/search", wrapper.SearchSongs)

	router.Delete(options.BaseURL+"/songs/:songId", wrapper.DeleteSong)

	router.Get(options.BaseURL+"/songs/:songId", wrapper.GetSong)

	router.Put(options.BaseURL+"/songs/:songId", wrapper.UpdateSong)

	router.Post(options.BaseURL+"/users", wrapper.CreateUser)

	router.Delete(options.BaseURL+"/users/:userId", wrapper.DeleteUser)

	router.Get(options.BaseURL+"/users/:userId", wrapper.GetUser)

	router.Put(options.BaseURL+"/users/:userId", wrapper.UpdateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4jTVW/UMwcgntyGT7u/v/w8AAP//ZoeSZCcqAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
