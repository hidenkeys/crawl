// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for FlagStatus.
const (
	FlagStatusActioned  FlagStatus = "actioned"
	FlagStatusDismissed FlagStatus = "dismissed"
	FlagStatusPending   FlagStatus = "pending"
	FlagStatusReviewed  FlagStatus = "reviewed"
)

// Defines values for FlagTargetType.
const (
	FlagTargetTypeAlbum FlagTargetType = "album"
	FlagTargetTypeSong  FlagTargetType = "song"
)

// Defines values for PostFlagsJSONBodyTargetType.
const (
	PostFlagsJSONBodyTargetTypeAlbum PostFlagsJSONBodyTargetType = "album"
	PostFlagsJSONBodyTargetTypeSong  PostFlagsJSONBodyTargetType = "song"
)

// Defines values for PostFlagsFlagsIdReviewJSONBodyStatus.
const (
	PostFlagsFlagsIdReviewJSONBodyStatusActioned  PostFlagsFlagsIdReviewJSONBodyStatus = "actioned"
	PostFlagsFlagsIdReviewJSONBodyStatusDismissed PostFlagsFlagsIdReviewJSONBodyStatus = "dismissed"
	PostFlagsFlagsIdReviewJSONBodyStatusPending   PostFlagsFlagsIdReviewJSONBodyStatus = "pending"
	PostFlagsFlagsIdReviewJSONBodyStatusReviewed  PostFlagsFlagsIdReviewJSONBodyStatus = "reviewed"
)

// Defines values for GetSearchAlbumsParamsSort.
const (
	GetSearchAlbumsParamsSortPopularity  GetSearchAlbumsParamsSort = "popularity"
	GetSearchAlbumsParamsSortPrice       GetSearchAlbumsParamsSort = "price"
	GetSearchAlbumsParamsSortReleaseDate GetSearchAlbumsParamsSort = "release_date"
	GetSearchAlbumsParamsSortTitle       GetSearchAlbumsParamsSort = "title"
)

// Defines values for GetSearchArtistsParamsSort.
const (
	GetSearchArtistsParamsSortListeners  GetSearchArtistsParamsSort = "listeners"
	GetSearchArtistsParamsSortName       GetSearchArtistsParamsSort = "name"
	GetSearchArtistsParamsSortPopularity GetSearchArtistsParamsSort = "popularity"
)

// Defines values for GetSearchGenresParamsSort.
const (
	GetSearchGenresParamsSortName       GetSearchGenresParamsSort = "name"
	GetSearchGenresParamsSortPopularity GetSearchGenresParamsSort = "popularity"
)

// Defines values for GetSearchPlaylistsParamsSort.
const (
	GetSearchPlaylistsParamsSortCreatedAt  GetSearchPlaylistsParamsSort = "created_at"
	GetSearchPlaylistsParamsSortPopularity GetSearchPlaylistsParamsSort = "popularity"
	GetSearchPlaylistsParamsSortTitle      GetSearchPlaylistsParamsSort = "title"
	GetSearchPlaylistsParamsSortUpdatedAt  GetSearchPlaylistsParamsSort = "updated_at"
)

// Defines values for GetSearchSongsParamsSort.
const (
	Duration    GetSearchSongsParamsSort = "duration"
	Popularity  GetSearchSongsParamsSort = "popularity"
	ReleaseDate GetSearchSongsParamsSort = "release_date"
	Title       GetSearchSongsParamsSort = "title"
)

// Defines values for GetSearchSongsParamsOrder.
const (
	Asc  GetSearchSongsParamsOrder = "asc"
	Desc GetSearchSongsParamsOrder = "desc"
)

// Album defines model for Album.
type Album struct {
	ArtistId      openapi_types.UUID  `json:"artistId"`
	CoverImageUrl *string             `json:"coverImageUrl,omitempty"`
	CreatedAt     *time.Time          `json:"createdAt,omitempty"`
	Description   *string             `json:"description,omitempty"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	IsFlagged     *bool               `json:"is_flagged,omitempty"`
	Likes         *float32            `json:"likes,omitempty"`
	Price         *int                `json:"price,omitempty"`
	ReleaseDate   *openapi_types.Date `json:"releaseDate,omitempty"`
	Title         string              `json:"title"`
	UpdatedAt     *time.Time          `json:"updatedAt,omitempty"`
}

// Artist defines model for Artist.
type Artist struct {
	ArtistName       string              `json:"artistName"`
	CreatedAt        *time.Time          `json:"createdAt,omitempty"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	MonthlyListeners *int                `json:"monthlyListeners,omitempty"`
	UpdatedAt        *time.Time          `json:"updatedAt,omitempty"`
	UserId           openapi_types.UUID  `json:"userId"`
	Verified         *bool               `json:"verified,omitempty"`
	WalletBalance    *int                `json:"walletBalance,omitempty"`
}

// Contributor defines model for Contributor.
type Contributor struct {
	ArtistId          openapi_types.UUID `json:"artistId"`
	ContributionType  string             `json:"contributionType"`
	CreatedAt         *time.Time         `json:"createdAt,omitempty"`
	RoyaltyPercentage *int               `json:"royaltyPercentage,omitempty"`
	UpdatedAt         *time.Time         `json:"updatedAt,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int     `json:"code"`
	Details *string `json:"details,omitempty"`
	Message string  `json:"message"`
}

// Flag defines model for Flag.
type Flag struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Detailed explanation of the flag
	Description *string `json:"description,omitempty"`

	// Id Auto-generated unique identifier
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Reason Category of the violation
	Reason string `json:"reason"`

	// ReporterUserId ID of the user reporting the content
	ReporterUserId openapi_types.UUID `json:"reporter_user_id"`

	// Status Current status of the flag
	Status FlagStatus `json:"status"`

	// TargetId ID of the flagged content (song or album)
	TargetId openapi_types.UUID `json:"target_id"`

	// TargetType Type of content being flagged
	TargetType FlagTargetType `json:"target_type"`
	UpdatedAt  *time.Time     `json:"updated_at,omitempty"`
}

// FlagStatus Current status of the flag
type FlagStatus string

// FlagTargetType Type of content being flagged
type FlagTargetType string

// Genre defines model for Genre.
type Genre struct {
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	ImageUrl    *string             `json:"imageUrl,omitempty"`
	Name        string              `json:"name"`
}

// Playlist defines model for Playlist.
type Playlist struct {
	CoverImageUrl *string             `json:"coverImageUrl,omitempty"`
	CreatedAt     *time.Time          `json:"createdAt,omitempty"`
	Description   *string             `json:"description,omitempty"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	IsPublic      *bool               `json:"isPublic,omitempty"`
	Title         string              `json:"title"`
	UpdatedAt     *time.Time          `json:"updatedAt,omitempty"`
	UserId        openapi_types.UUID  `json:"userId"`
}

// Purchase defines model for Purchase.
type Purchase struct {
	Currency      string              `json:"currency"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	PaymentStatus string              `json:"paymentStatus"`
	PurchasePrice int                 `json:"purchasePrice"`
	PurchasedAt   *time.Time          `json:"purchasedAt,omitempty"`
	UserId        openapi_types.UUID  `json:"userId"`
}

// Song defines model for Song.
type Song struct {
	AlbumId       *openapi_types.UUID `json:"albumId,omitempty"`
	ArtistId      openapi_types.UUID  `json:"artistId"`
	ArtistsNames  []string            `json:"artists_names"`
	AudioUrl      string              `json:"audioUrl"`
	CoverImageUrl *string             `json:"coverImageUrl,omitempty"`
	CreatedAt     *time.Time          `json:"createdAt,omitempty"`

	// Duration Duration in seconds
	Duration    int                 `json:"duration"`
	GenreId     openapi_types.UUID  `json:"genreId"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	IsFlagged   *bool               `json:"is_flagged,omitempty"`
	PlaysCount  *int                `json:"playsCount,omitempty"`
	PreviewUrl  *string             `json:"previewUrl,omitempty"`
	Price       int                 `json:"price"`
	ReleaseDate openapi_types.Date  `json:"releaseDate"`
	Title       string              `json:"title"`
	UpdatedAt   *time.Time          `json:"updatedAt,omitempty"`
}

// User defines model for User.
type User struct {
	Bio             *string             `json:"bio,omitempty"`
	CreatedAt       *time.Time          `json:"createdAt,omitempty"`
	Email           openapi_types.Email `json:"email"`
	FirstName       string              `json:"firstName"`
	Id              *openapi_types.UUID `json:"id,omitempty"`
	IsArtist        *bool               `json:"isArtist,omitempty"`
	LastName        string              `json:"lastName"`
	Password        *string             `json:"password,omitempty"`
	PhoneNumber     *string             `json:"phoneNumber,omitempty"`
	ProfileImageUrl *string             `json:"profileImageUrl,omitempty"`
	UpdatedAt       *time.Time          `json:"updatedAt,omitempty"`
	Username        string              `json:"username"`
}

// AlbumId defines model for albumId.
type AlbumId = openapi_types.UUID

// ArtistId defines model for artistId.
type ArtistId = openapi_types.UUID

// FlagsId defines model for flagsId.
type FlagsId = openapi_types.UUID

// GenreId defines model for genreId.
type GenreId = openapi_types.UUID

// Limit defines model for limit.
type Limit = int

// Page defines model for page.
type Page = int

// PlaylistId defines model for playlistId.
type PlaylistId = openapi_types.UUID

// SongId defines model for songId.
type SongId = openapi_types.UUID

// UserId defines model for userId.
type UserId = openapi_types.UUID

// GetAlbumsParams defines parameters for GetAlbums.
type GetAlbumsParams struct {
	// Page Page integer
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Artist Filter by artist ID
	Artist *openapi_types.UUID `form:"artist,omitempty" json:"artist,omitempty"`
}

// GetArtistsParams defines parameters for GetArtists.
type GetArtistsParams struct {
	// Page Page integer
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Verified Filter by verified status
	Verified *bool `form:"verified,omitempty" json:"verified,omitempty"`
}

// GetArtistsArtistIdSongsParams defines parameters for GetArtistsArtistIdSongs.
type GetArtistsArtistIdSongsParams struct {
	// Page Page integer
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostCreateAdminJSONBody defines parameters for PostCreateAdmin.
type PostCreateAdminJSONBody struct {
	UserId *openapi_types.UUID `json:"userId,omitempty"`
}

// PostFlagsJSONBody defines parameters for PostFlags.
type PostFlagsJSONBody struct {
	Description *string                     `json:"description,omitempty"`
	Reason      string                      `json:"reason"`
	TargetId    openapi_types.UUID          `json:"targetId"`
	TargetType  PostFlagsJSONBodyTargetType `json:"targetType"`
}

// PostFlagsJSONBodyTargetType defines parameters for PostFlags.
type PostFlagsJSONBodyTargetType string

// PostFlagsFlagsIdReviewJSONBody defines parameters for PostFlagsFlagsIdReview.
type PostFlagsFlagsIdReviewJSONBody struct {
	Status *PostFlagsFlagsIdReviewJSONBodyStatus `json:"status,omitempty"`
}

// PostFlagsFlagsIdReviewJSONBodyStatus defines parameters for PostFlagsFlagsIdReview.
type PostFlagsFlagsIdReviewJSONBodyStatus string

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// PostPlaylistsPlaylistIdSongsJSONBody defines parameters for PostPlaylistsPlaylistIdSongs.
type PostPlaylistsPlaylistIdSongsJSONBody struct {
	SongId openapi_types.UUID `json:"songId"`
}

// PostPurchasesAlbumsJSONBody defines parameters for PostPurchasesAlbums.
type PostPurchasesAlbumsJSONBody struct {
	AlbumId         openapi_types.UUID `json:"albumId"`
	PaymentMethodId string             `json:"paymentMethodId"`
	UserId          openapi_types.UUID `json:"userId"`
}

// PostPurchasesSongsJSONBody defines parameters for PostPurchasesSongs.
type PostPurchasesSongsJSONBody struct {
	// PaymentMethodId Stripe payment method ID
	PaymentMethodId string             `json:"paymentMethodId"`
	SongId          openapi_types.UUID `json:"songId"`
	UserId          openapi_types.UUID `json:"userId"`
}

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {
	// Query Search term
	Query string `form:"query" json:"query"`

	// Types Comma-separated list of content types to search (songs,albums,artists,playlists,genres)
	Types *string `form:"types,omitempty" json:"types,omitempty"`

	// Page Page integer
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSearchAlbumsParams defines parameters for GetSearchAlbums.
type GetSearchAlbumsParams struct {
	// Query Search term (album title)
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Artist Filter by artist name or ID
	Artist *string `form:"artist,omitempty" json:"artist,omitempty"`

	// Genre Filter by genre name or ID
	Genre *string `form:"genre,omitempty" json:"genre,omitempty"`

	// Sort Sort field (popularity,release_date,price)
	Sort *GetSearchAlbumsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Page Page integer
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSearchAlbumsParamsSort defines parameters for GetSearchAlbums.
type GetSearchAlbumsParamsSort string

// GetSearchArtistsParams defines parameters for GetSearchArtists.
type GetSearchArtistsParams struct {
	// Query Search term (artist name)
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Genre Filter by genre name or ID
	Genre *string `form:"genre,omitempty" json:"genre,omitempty"`

	// Sort Sort field (popularity,listeners,name)
	Sort *GetSearchArtistsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Page Page integer
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSearchArtistsParamsSort defines parameters for GetSearchArtists.
type GetSearchArtistsParamsSort string

// GetSearchGenresParams defines parameters for GetSearchGenres.
type GetSearchGenresParams struct {
	// Query Search term (genre name)
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Sort Sort field (popularity,name)
	Sort *GetSearchGenresParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSearchGenresParamsSort defines parameters for GetSearchGenres.
type GetSearchGenresParamsSort string

// GetSearchPlaylistsParams defines parameters for GetSearchPlaylists.
type GetSearchPlaylistsParams struct {
	// Query Search term (playlist title or description)
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Owner Filter by owner username or ID
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`

	// IsPublic Filter by public/private status
	IsPublic *bool `form:"isPublic,omitempty" json:"isPublic,omitempty"`

	// Sort Sort field (popularity,created_at,updated_at)
	Sort *GetSearchPlaylistsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Page Page integer
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSearchPlaylistsParamsSort defines parameters for GetSearchPlaylists.
type GetSearchPlaylistsParamsSort string

// GetSearchSongsParams defines parameters for GetSearchSongs.
type GetSearchSongsParams struct {
	// Query Search term (title or lyrics)
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Artist Filter by artist name or ID
	Artist *string `form:"artist,omitempty" json:"artist,omitempty"`

	// Genre Filter by genre name or ID
	Genre *string `form:"genre,omitempty" json:"genre,omitempty"`

	// Sort Sort field (popularity,release_date,duration)
	Sort *GetSearchSongsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sort order
	Order *GetSearchSongsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Page Page integer
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSearchSongsParamsSort defines parameters for GetSearchSongs.
type GetSearchSongsParamsSort string

// GetSearchSongsParamsOrder defines parameters for GetSearchSongs.
type GetSearchSongsParamsOrder string

// GetSongsParams defines parameters for GetSongs.
type GetSongsParams struct {
	// Page Page integer
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Genre Filter by genre ID
	Genre *string `form:"genre,omitempty" json:"genre,omitempty"`

	// Artist Filter by artist ID
	Artist *string `form:"artist,omitempty" json:"artist,omitempty"`

	// Album Filter by album ID
	Album *string `form:"album,omitempty" json:"album,omitempty"`
}

// PostStreamsJSONBody defines parameters for PostStreams.
type PostStreamsJSONBody struct {
	CountryCode *string            `json:"countryCode,omitempty"`
	DeviceType  *string            `json:"deviceType,omitempty"`
	IsPreview   *bool              `json:"isPreview,omitempty"`
	SongId      openapi_types.UUID `json:"songId"`
}

// PostTipsJSONBody defines parameters for PostTips.
type PostTipsJSONBody struct {
	Amount          int                `json:"amount"`
	ArtistId        openapi_types.UUID `json:"artistId"`
	Message         *string            `json:"message,omitempty"`
	PaymentMethodId string             `json:"paymentMethodId"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Page Page integer
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetUsersUserIdLibraryPurchasesParams defines parameters for GetUsersUserIdLibraryPurchases.
type GetUsersUserIdLibraryPurchasesParams struct {
	// Page Page integer
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostAlbumsJSONRequestBody defines body for PostAlbums for application/json ContentType.
type PostAlbumsJSONRequestBody = Album

// PutAlbumsAlbumIdJSONRequestBody defines body for PutAlbumsAlbumId for application/json ContentType.
type PutAlbumsAlbumIdJSONRequestBody = Album

// PostAlbumsAlbumIdContributorsJSONRequestBody defines body for PostAlbumsAlbumIdContributors for application/json ContentType.
type PostAlbumsAlbumIdContributorsJSONRequestBody = Contributor

// PostArtistsJSONRequestBody defines body for PostArtists for application/json ContentType.
type PostArtistsJSONRequestBody = Artist

// PutArtistsArtistIdJSONRequestBody defines body for PutArtistsArtistId for application/json ContentType.
type PutArtistsArtistIdJSONRequestBody = Artist

// PostCreateAdminJSONRequestBody defines body for PostCreateAdmin for application/json ContentType.
type PostCreateAdminJSONRequestBody PostCreateAdminJSONBody

// PostFlagsJSONRequestBody defines body for PostFlags for application/json ContentType.
type PostFlagsJSONRequestBody PostFlagsJSONBody

// PostFlagsFlagsIdReviewJSONRequestBody defines body for PostFlagsFlagsIdReview for application/json ContentType.
type PostFlagsFlagsIdReviewJSONRequestBody PostFlagsFlagsIdReviewJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PutPlaylistsPlaylistIdJSONRequestBody defines body for PutPlaylistsPlaylistId for application/json ContentType.
type PutPlaylistsPlaylistIdJSONRequestBody = Playlist

// PostPlaylistsPlaylistIdSongsJSONRequestBody defines body for PostPlaylistsPlaylistIdSongs for application/json ContentType.
type PostPlaylistsPlaylistIdSongsJSONRequestBody PostPlaylistsPlaylistIdSongsJSONBody

// PostPurchasesAlbumsJSONRequestBody defines body for PostPurchasesAlbums for application/json ContentType.
type PostPurchasesAlbumsJSONRequestBody PostPurchasesAlbumsJSONBody

// PostPurchasesSongsJSONRequestBody defines body for PostPurchasesSongs for application/json ContentType.
type PostPurchasesSongsJSONRequestBody PostPurchasesSongsJSONBody

// PostSongsJSONRequestBody defines body for PostSongs for application/json ContentType.
type PostSongsJSONRequestBody = Song

// PutSongsSongIdJSONRequestBody defines body for PutSongsSongId for application/json ContentType.
type PutSongsSongIdJSONRequestBody = Song

// PostSongsSongIdContributorsJSONRequestBody defines body for PostSongsSongIdContributors for application/json ContentType.
type PostSongsSongIdContributorsJSONRequestBody = Contributor

// PostStreamsJSONRequestBody defines body for PostStreams for application/json ContentType.
type PostStreamsJSONRequestBody PostStreamsJSONBody

// PostTipsJSONRequestBody defines body for PostTips for application/json ContentType.
type PostTipsJSONRequestBody PostTipsJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = User

// PutUsersUserIdJSONRequestBody defines body for PutUsersUserId for application/json ContentType.
type PutUsersUserIdJSONRequestBody = User

// PostUsersUserIdPlaylistsJSONRequestBody defines body for PostUsersUserIdPlaylists for application/json ContentType.
type PostUsersUserIdPlaylistsJSONRequestBody = Playlist

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all albums
	// (GET /albums)
	GetAlbums(c *fiber.Ctx, params GetAlbumsParams) error
	// Create a new album
	// (POST /albums)
	PostAlbums(c *fiber.Ctx) error
	// Delete album
	// (DELETE /albums/{albumId})
	DeleteAlbumsAlbumId(c *fiber.Ctx, albumId AlbumId) error
	// Get album by ID
	// (GET /albums/{albumId})
	GetAlbumsAlbumId(c *fiber.Ctx, albumId AlbumId) error
	// Update album
	// (PUT /albums/{albumId})
	PutAlbumsAlbumId(c *fiber.Ctx, albumId AlbumId) error
	// Get album contributors
	// (GET /albums/{albumId}/contributors)
	GetAlbumsAlbumIdContributors(c *fiber.Ctx, albumId AlbumId) error
	// Add contributor to album
	// (POST /albums/{albumId}/contributors)
	PostAlbumsAlbumIdContributors(c *fiber.Ctx, albumId AlbumId) error
	// Get album's songs
	// (GET /albums/{albumId}/songs)
	GetAlbumsAlbumIdSongs(c *fiber.Ctx, albumId AlbumId) error
	// List all artists
	// (GET /artists)
	GetArtists(c *fiber.Ctx, params GetArtistsParams) error
	// Create a new artist profile
	// (POST /artists)
	PostArtists(c *fiber.Ctx) error
	// Get artist by ID
	// (GET /artists/{artistId})
	GetArtistsArtistId(c *fiber.Ctx, artistId ArtistId) error
	// Update artist
	// (PUT /artists/{artistId})
	PutArtistsArtistId(c *fiber.Ctx, artistId ArtistId) error
	// Get artist's songs
	// (GET /artists/{artistId}/songs)
	GetArtistsArtistIdSongs(c *fiber.Ctx, artistId ArtistId, params GetArtistsArtistIdSongsParams) error
	// Create An admin
	// (POST /createAdmin)
	PostCreateAdmin(c *fiber.Ctx) error
	// Flag content
	// (GET /flags)
	GetFlags(c *fiber.Ctx) error
	// Flag content
	// (POST /flags)
	PostFlags(c *fiber.Ctx) error
	// Get flagged content
	// (GET /flags/{flagsId})
	GetFlagsFlagsId(c *fiber.Ctx, flagsId FlagsId) error
	// Review a flagged content
	// (POST /flags/{flagsId}/review)
	PostFlagsFlagsIdReview(c *fiber.Ctx, flagsId FlagsId) error
	// Flag content
	// (POST /flags/{songId})
	PostFlagsSongId(c *fiber.Ctx, songId SongId) error
	// List all genres
	// (GET /genres)
	GetGenres(c *fiber.Ctx) error
	// Get genre by ID
	// (GET /genres/{genreId})
	GetGenresGenreId(c *fiber.Ctx, genreId GenreId) error
	// User login credentials
	// (POST /login)
	PostLogin(c *fiber.Ctx) error
	// Delete playlist
	// (DELETE /playlists/{playlistId})
	DeletePlaylistsPlaylistId(c *fiber.Ctx, playlistId PlaylistId) error
	// Get playlist by ID
	// (GET /playlists/{playlistId})
	GetPlaylistsPlaylistId(c *fiber.Ctx, playlistId PlaylistId) error
	// Update playlist
	// (PUT /playlists/{playlistId})
	PutPlaylistsPlaylistId(c *fiber.Ctx, playlistId PlaylistId) error
	// Get playlist songs
	// (GET /playlists/{playlistId}/songs)
	GetPlaylistsPlaylistIdSongs(c *fiber.Ctx, playlistId PlaylistId) error
	// Add song to playlist
	// (POST /playlists/{playlistId}/songs)
	PostPlaylistsPlaylistIdSongs(c *fiber.Ctx, playlistId PlaylistId) error
	// Remove song from playlist
	// (DELETE /playlists/{playlistId}/songs/{songId})
	DeletePlaylistsPlaylistIdSongsSongId(c *fiber.Ctx, playlistId PlaylistId, songId SongId) error
	// Purchase an album
	// (POST /purchases/albums)
	PostPurchasesAlbums(c *fiber.Ctx) error
	// Purchase a song
	// (POST /purchases/songs)
	PostPurchasesSongs(c *fiber.Ctx) error
	// Global search across all content types
	// (GET /search)
	GetSearch(c *fiber.Ctx, params GetSearchParams) error
	// Search albums with advanced filters
	// (GET /search/albums)
	GetSearchAlbums(c *fiber.Ctx, params GetSearchAlbumsParams) error
	// Search artists with advanced filters
	// (GET /search/artists)
	GetSearchArtists(c *fiber.Ctx, params GetSearchArtistsParams) error
	// Search genres
	// (GET /search/genres)
	GetSearchGenres(c *fiber.Ctx, params GetSearchGenresParams) error
	// Search playlists
	// (GET /search/playlists)
	GetSearchPlaylists(c *fiber.Ctx, params GetSearchPlaylistsParams) error
	// Search songs with advanced filters
	// (GET /search/songs)
	GetSearchSongs(c *fiber.Ctx, params GetSearchSongsParams) error
	// List all songs
	// (GET /songs)
	GetSongs(c *fiber.Ctx, params GetSongsParams) error
	// Create a new song
	// (POST /songs)
	PostSongs(c *fiber.Ctx) error
	// Delete song
	// (DELETE /songs/{songId})
	DeleteSongsSongId(c *fiber.Ctx, songId SongId) error
	// Get song by ID
	// (GET /songs/{songId})
	GetSongsSongId(c *fiber.Ctx, songId SongId) error
	// Update song
	// (PUT /songs/{songId})
	PutSongsSongId(c *fiber.Ctx, songId SongId) error
	// Get song contributors
	// (GET /songs/{songId}/contributors)
	GetSongsSongIdContributors(c *fiber.Ctx, songId SongId) error
	// Add contributor to song
	// (POST /songs/{songId}/contributors)
	PostSongsSongIdContributors(c *fiber.Ctx, songId SongId) error
	// Record a stream
	// (POST /streams)
	PostStreams(c *fiber.Ctx) error
	// Send tip to artist
	// (POST /tips)
	PostTips(c *fiber.Ctx) error
	// List all users
	// (GET /users)
	GetUsers(c *fiber.Ctx, params GetUsersParams) error
	// Create a new user
	// (POST /users)
	PostUsers(c *fiber.Ctx) error
	// Delete user
	// (DELETE /users/{userId})
	DeleteUsersUserId(c *fiber.Ctx, userId UserId) error
	// Get user by ID
	// (GET /users/{userId})
	GetUsersUserId(c *fiber.Ctx, userId UserId) error
	// Update user
	// (PUT /users/{userId})
	PutUsersUserId(c *fiber.Ctx, userId UserId) error
	// Get user's purchased albums
	// (GET /users/{userId}/library/albums)
	GetUsersUserIdLibraryAlbums(c *fiber.Ctx, userId UserId) error
	// Get user's purchase history
	// (GET /users/{userId}/library/purchases)
	GetUsersUserIdLibraryPurchases(c *fiber.Ctx, userId UserId, params GetUsersUserIdLibraryPurchasesParams) error
	// Get user's purchased songs
	// (GET /users/{userId}/library/songs)
	GetUsersUserIdLibrarySongs(c *fiber.Ctx, userId UserId) error
	// Get user's playlists
	// (GET /users/{userId}/playlists)
	GetUsersUserIdPlaylists(c *fiber.Ctx, userId UserId) error
	// Create a new playlist
	// (POST /users/{userId}/playlists)
	PostUsersUserIdPlaylists(c *fiber.Ctx, userId UserId) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAlbums(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "artist" -------------

	err = runtime.BindQueryParameter("form", true, false, "artist", query, &params.Artist)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter artist: %w", err).Error())
	}

	return siw.Handler.GetAlbums(c, params)
}

// PostAlbums operation middleware
func (siw *ServerInterfaceWrapper) PostAlbums(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostAlbums(c)
}

// DeleteAlbumsAlbumId operation middleware
func (siw *ServerInterfaceWrapper) DeleteAlbumsAlbumId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "albumId" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "albumId", c.Params("albumId"), &albumId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter albumId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteAlbumsAlbumId(c, albumId)
}

// GetAlbumsAlbumId operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsAlbumId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "albumId" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "albumId", c.Params("albumId"), &albumId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter albumId: %w", err).Error())
	}

	return siw.Handler.GetAlbumsAlbumId(c, albumId)
}

// PutAlbumsAlbumId operation middleware
func (siw *ServerInterfaceWrapper) PutAlbumsAlbumId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "albumId" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "albumId", c.Params("albumId"), &albumId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter albumId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PutAlbumsAlbumId(c, albumId)
}

// GetAlbumsAlbumIdContributors operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsAlbumIdContributors(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "albumId" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "albumId", c.Params("albumId"), &albumId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter albumId: %w", err).Error())
	}

	return siw.Handler.GetAlbumsAlbumIdContributors(c, albumId)
}

// PostAlbumsAlbumIdContributors operation middleware
func (siw *ServerInterfaceWrapper) PostAlbumsAlbumIdContributors(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "albumId" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "albumId", c.Params("albumId"), &albumId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter albumId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostAlbumsAlbumIdContributors(c, albumId)
}

// GetAlbumsAlbumIdSongs operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsAlbumIdSongs(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "albumId" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "albumId", c.Params("albumId"), &albumId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter albumId: %w", err).Error())
	}

	return siw.Handler.GetAlbumsAlbumIdSongs(c, albumId)
}

// GetArtists operation middleware
func (siw *ServerInterfaceWrapper) GetArtists(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArtistsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "verified" -------------

	err = runtime.BindQueryParameter("form", true, false, "verified", query, &params.Verified)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter verified: %w", err).Error())
	}

	return siw.Handler.GetArtists(c, params)
}

// PostArtists operation middleware
func (siw *ServerInterfaceWrapper) PostArtists(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostArtists(c)
}

// GetArtistsArtistId operation middleware
func (siw *ServerInterfaceWrapper) GetArtistsArtistId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "artistId" -------------
	var artistId ArtistId

	err = runtime.BindStyledParameter("simple", false, "artistId", c.Params("artistId"), &artistId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter artistId: %w", err).Error())
	}

	return siw.Handler.GetArtistsArtistId(c, artistId)
}

// PutArtistsArtistId operation middleware
func (siw *ServerInterfaceWrapper) PutArtistsArtistId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "artistId" -------------
	var artistId ArtistId

	err = runtime.BindStyledParameter("simple", false, "artistId", c.Params("artistId"), &artistId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter artistId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PutArtistsArtistId(c, artistId)
}

// GetArtistsArtistIdSongs operation middleware
func (siw *ServerInterfaceWrapper) GetArtistsArtistIdSongs(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "artistId" -------------
	var artistId ArtistId

	err = runtime.BindStyledParameter("simple", false, "artistId", c.Params("artistId"), &artistId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter artistId: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArtistsArtistIdSongsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.GetArtistsArtistIdSongs(c, artistId, params)
}

// PostCreateAdmin operation middleware
func (siw *ServerInterfaceWrapper) PostCreateAdmin(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostCreateAdmin(c)
}

// GetFlags operation middleware
func (siw *ServerInterfaceWrapper) GetFlags(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetFlags(c)
}

// PostFlags operation middleware
func (siw *ServerInterfaceWrapper) PostFlags(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostFlags(c)
}

// GetFlagsFlagsId operation middleware
func (siw *ServerInterfaceWrapper) GetFlagsFlagsId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "flagsId" -------------
	var flagsId FlagsId

	err = runtime.BindStyledParameter("simple", false, "flagsId", c.Params("flagsId"), &flagsId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter flagsId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetFlagsFlagsId(c, flagsId)
}

// PostFlagsFlagsIdReview operation middleware
func (siw *ServerInterfaceWrapper) PostFlagsFlagsIdReview(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "flagsId" -------------
	var flagsId FlagsId

	err = runtime.BindStyledParameter("simple", false, "flagsId", c.Params("flagsId"), &flagsId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter flagsId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostFlagsFlagsIdReview(c, flagsId)
}

// PostFlagsSongId operation middleware
func (siw *ServerInterfaceWrapper) PostFlagsSongId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "songId" -------------
	var songId SongId

	err = runtime.BindStyledParameter("simple", false, "songId", c.Params("songId"), &songId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter songId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostFlagsSongId(c, songId)
}

// GetGenres operation middleware
func (siw *ServerInterfaceWrapper) GetGenres(c *fiber.Ctx) error {

	return siw.Handler.GetGenres(c)
}

// GetGenresGenreId operation middleware
func (siw *ServerInterfaceWrapper) GetGenresGenreId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "genreId" -------------
	var genreId GenreId

	err = runtime.BindStyledParameter("simple", false, "genreId", c.Params("genreId"), &genreId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter genreId: %w", err).Error())
	}

	return siw.Handler.GetGenresGenreId(c, genreId)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *fiber.Ctx) error {

	return siw.Handler.PostLogin(c)
}

// DeletePlaylistsPlaylistId operation middleware
func (siw *ServerInterfaceWrapper) DeletePlaylistsPlaylistId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "playlistId" -------------
	var playlistId PlaylistId

	err = runtime.BindStyledParameter("simple", false, "playlistId", c.Params("playlistId"), &playlistId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter playlistId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeletePlaylistsPlaylistId(c, playlistId)
}

// GetPlaylistsPlaylistId operation middleware
func (siw *ServerInterfaceWrapper) GetPlaylistsPlaylistId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "playlistId" -------------
	var playlistId PlaylistId

	err = runtime.BindStyledParameter("simple", false, "playlistId", c.Params("playlistId"), &playlistId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter playlistId: %w", err).Error())
	}

	return siw.Handler.GetPlaylistsPlaylistId(c, playlistId)
}

// PutPlaylistsPlaylistId operation middleware
func (siw *ServerInterfaceWrapper) PutPlaylistsPlaylistId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "playlistId" -------------
	var playlistId PlaylistId

	err = runtime.BindStyledParameter("simple", false, "playlistId", c.Params("playlistId"), &playlistId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter playlistId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PutPlaylistsPlaylistId(c, playlistId)
}

// GetPlaylistsPlaylistIdSongs operation middleware
func (siw *ServerInterfaceWrapper) GetPlaylistsPlaylistIdSongs(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "playlistId" -------------
	var playlistId PlaylistId

	err = runtime.BindStyledParameter("simple", false, "playlistId", c.Params("playlistId"), &playlistId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter playlistId: %w", err).Error())
	}

	return siw.Handler.GetPlaylistsPlaylistIdSongs(c, playlistId)
}

// PostPlaylistsPlaylistIdSongs operation middleware
func (siw *ServerInterfaceWrapper) PostPlaylistsPlaylistIdSongs(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "playlistId" -------------
	var playlistId PlaylistId

	err = runtime.BindStyledParameter("simple", false, "playlistId", c.Params("playlistId"), &playlistId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter playlistId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostPlaylistsPlaylistIdSongs(c, playlistId)
}

// DeletePlaylistsPlaylistIdSongsSongId operation middleware
func (siw *ServerInterfaceWrapper) DeletePlaylistsPlaylistIdSongsSongId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "playlistId" -------------
	var playlistId PlaylistId

	err = runtime.BindStyledParameter("simple", false, "playlistId", c.Params("playlistId"), &playlistId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter playlistId: %w", err).Error())
	}

	// ------------- Path parameter "songId" -------------
	var songId SongId

	err = runtime.BindStyledParameter("simple", false, "songId", c.Params("songId"), &songId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter songId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeletePlaylistsPlaylistIdSongsSongId(c, playlistId, songId)
}

// PostPurchasesAlbums operation middleware
func (siw *ServerInterfaceWrapper) PostPurchasesAlbums(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostPurchasesAlbums(c)
}

// PostPurchasesSongs operation middleware
func (siw *ServerInterfaceWrapper) PostPurchasesSongs(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostPurchasesSongs(c)
}

// GetSearch operation middleware
func (siw *ServerInterfaceWrapper) GetSearch(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "query" -------------

	if paramValue := c.Query("query"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument query is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "query", query, &params.Query)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter query: %w", err).Error())
	}

	// ------------- Optional query parameter "types" -------------

	err = runtime.BindQueryParameter("form", true, false, "types", query, &params.Types)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter types: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.GetSearch(c, params)
}

// GetSearchAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetSearchAlbums(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchAlbumsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", query, &params.Query)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter query: %w", err).Error())
	}

	// ------------- Optional query parameter "artist" -------------

	err = runtime.BindQueryParameter("form", true, false, "artist", query, &params.Artist)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter artist: %w", err).Error())
	}

	// ------------- Optional query parameter "genre" -------------

	err = runtime.BindQueryParameter("form", true, false, "genre", query, &params.Genre)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter genre: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.GetSearchAlbums(c, params)
}

// GetSearchArtists operation middleware
func (siw *ServerInterfaceWrapper) GetSearchArtists(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchArtistsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", query, &params.Query)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter query: %w", err).Error())
	}

	// ------------- Optional query parameter "genre" -------------

	err = runtime.BindQueryParameter("form", true, false, "genre", query, &params.Genre)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter genre: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.GetSearchArtists(c, params)
}

// GetSearchGenres operation middleware
func (siw *ServerInterfaceWrapper) GetSearchGenres(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchGenresParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", query, &params.Query)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter query: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	return siw.Handler.GetSearchGenres(c, params)
}

// GetSearchPlaylists operation middleware
func (siw *ServerInterfaceWrapper) GetSearchPlaylists(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchPlaylistsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", query, &params.Query)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter query: %w", err).Error())
	}

	// ------------- Optional query parameter "owner" -------------

	err = runtime.BindQueryParameter("form", true, false, "owner", query, &params.Owner)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter owner: %w", err).Error())
	}

	// ------------- Optional query parameter "isPublic" -------------

	err = runtime.BindQueryParameter("form", true, false, "isPublic", query, &params.IsPublic)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter isPublic: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.GetSearchPlaylists(c, params)
}

// GetSearchSongs operation middleware
func (siw *ServerInterfaceWrapper) GetSearchSongs(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchSongsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", query, &params.Query)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter query: %w", err).Error())
	}

	// ------------- Optional query parameter "artist" -------------

	err = runtime.BindQueryParameter("form", true, false, "artist", query, &params.Artist)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter artist: %w", err).Error())
	}

	// ------------- Optional query parameter "genre" -------------

	err = runtime.BindQueryParameter("form", true, false, "genre", query, &params.Genre)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter genre: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", query, &params.Order)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter order: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.GetSearchSongs(c, params)
}

// GetSongs operation middleware
func (siw *ServerInterfaceWrapper) GetSongs(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSongsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "genre" -------------

	err = runtime.BindQueryParameter("form", true, false, "genre", query, &params.Genre)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter genre: %w", err).Error())
	}

	// ------------- Optional query parameter "artist" -------------

	err = runtime.BindQueryParameter("form", true, false, "artist", query, &params.Artist)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter artist: %w", err).Error())
	}

	// ------------- Optional query parameter "album" -------------

	err = runtime.BindQueryParameter("form", true, false, "album", query, &params.Album)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter album: %w", err).Error())
	}

	return siw.Handler.GetSongs(c, params)
}

// PostSongs operation middleware
func (siw *ServerInterfaceWrapper) PostSongs(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostSongs(c)
}

// DeleteSongsSongId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSongsSongId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "songId" -------------
	var songId SongId

	err = runtime.BindStyledParameter("simple", false, "songId", c.Params("songId"), &songId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter songId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteSongsSongId(c, songId)
}

// GetSongsSongId operation middleware
func (siw *ServerInterfaceWrapper) GetSongsSongId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "songId" -------------
	var songId SongId

	err = runtime.BindStyledParameter("simple", false, "songId", c.Params("songId"), &songId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter songId: %w", err).Error())
	}

	return siw.Handler.GetSongsSongId(c, songId)
}

// PutSongsSongId operation middleware
func (siw *ServerInterfaceWrapper) PutSongsSongId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "songId" -------------
	var songId SongId

	err = runtime.BindStyledParameter("simple", false, "songId", c.Params("songId"), &songId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter songId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PutSongsSongId(c, songId)
}

// GetSongsSongIdContributors operation middleware
func (siw *ServerInterfaceWrapper) GetSongsSongIdContributors(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "songId" -------------
	var songId SongId

	err = runtime.BindStyledParameter("simple", false, "songId", c.Params("songId"), &songId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter songId: %w", err).Error())
	}

	return siw.Handler.GetSongsSongIdContributors(c, songId)
}

// PostSongsSongIdContributors operation middleware
func (siw *ServerInterfaceWrapper) PostSongsSongIdContributors(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "songId" -------------
	var songId SongId

	err = runtime.BindStyledParameter("simple", false, "songId", c.Params("songId"), &songId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter songId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostSongsSongIdContributors(c, songId)
}

// PostStreams operation middleware
func (siw *ServerInterfaceWrapper) PostStreams(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostStreams(c)
}

// PostTips operation middleware
func (siw *ServerInterfaceWrapper) PostTips(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostTips(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.GetUsers(c, params)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *fiber.Ctx) error {

	return siw.Handler.PostUsers(c)
}

// DeleteUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUserId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "userId", c.Params("userId"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteUsersUserId(c, userId)
}

// GetUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "userId", c.Params("userId"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUsersUserId(c, userId)
}

// PutUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "userId", c.Params("userId"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PutUsersUserId(c, userId)
}

// GetUsersUserIdLibraryAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserIdLibraryAlbums(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "userId", c.Params("userId"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUsersUserIdLibraryAlbums(c, userId)
}

// GetUsersUserIdLibraryPurchases operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserIdLibraryPurchases(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "userId", c.Params("userId"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersUserIdLibraryPurchasesParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.GetUsersUserIdLibraryPurchases(c, userId, params)
}

// GetUsersUserIdLibrarySongs operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserIdLibrarySongs(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "userId", c.Params("userId"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUsersUserIdLibrarySongs(c, userId)
}

// GetUsersUserIdPlaylists operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserIdPlaylists(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "userId", c.Params("userId"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetUsersUserIdPlaylists(c, userId)
}

// PostUsersUserIdPlaylists operation middleware
func (siw *ServerInterfaceWrapper) PostUsersUserIdPlaylists(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "userId", c.Params("userId"), &userId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostUsersUserIdPlaylists(c, userId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/albums", wrapper.GetAlbums)

	router.Post(options.BaseURL+"/albums", wrapper.PostAlbums)

	router.Delete(options.BaseURL+"/albums/:albumId", wrapper.DeleteAlbumsAlbumId)

	router.Get(options.BaseURL+"/albums/:albumId", wrapper.GetAlbumsAlbumId)

	router.Put(options.BaseURL+"/albums/:albumId", wrapper.PutAlbumsAlbumId)

	router.Get(options.BaseURL+"/albums/:albumId/contributors", wrapper.GetAlbumsAlbumIdContributors)

	router.Post(options.BaseURL+"/albums/:albumId/contributors", wrapper.PostAlbumsAlbumIdContributors)

	router.Get(options.BaseURL+"/albums/:albumId/songs", wrapper.GetAlbumsAlbumIdSongs)

	router.Get(options.BaseURL+"/artists", wrapper.GetArtists)

	router.Post(options.BaseURL+"/artists", wrapper.PostArtists)

	router.Get(options.BaseURL+"/artists/:artistId", wrapper.GetArtistsArtistId)

	router.Put(options.BaseURL+"/artists/:artistId", wrapper.PutArtistsArtistId)

	router.Get(options.BaseURL+"/artists/:artistId/songs", wrapper.GetArtistsArtistIdSongs)

	router.Post(options.BaseURL+"/createAdmin", wrapper.PostCreateAdmin)

	router.Get(options.BaseURL+"/flags", wrapper.GetFlags)

	router.Post(options.BaseURL+"/flags", wrapper.PostFlags)

	router.Get(options.BaseURL+"/flags/:flagsId", wrapper.GetFlagsFlagsId)

	router.Post(options.BaseURL+"/flags/:flagsId/review", wrapper.PostFlagsFlagsIdReview)

	router.Post(options.BaseURL+"/flags/:songId", wrapper.PostFlagsSongId)

	router.Get(options.BaseURL+"/genres", wrapper.GetGenres)

	router.Get(options.BaseURL+"/genres/:genreId", wrapper.GetGenresGenreId)

	router.Post(options.BaseURL+"/login", wrapper.PostLogin)

	router.Delete(options.BaseURL+"/playlists/:playlistId", wrapper.DeletePlaylistsPlaylistId)

	router.Get(options.BaseURL+"/playlists/:playlistId", wrapper.GetPlaylistsPlaylistId)

	router.Put(options.BaseURL+"/playlists/:playlistId", wrapper.PutPlaylistsPlaylistId)

	router.Get(options.BaseURL+"/playlists/:playlistId/songs", wrapper.GetPlaylistsPlaylistIdSongs)

	router.Post(options.BaseURL+"/playlists/:playlistId/songs", wrapper.PostPlaylistsPlaylistIdSongs)

	router.Delete(options.BaseURL+"/playlists/:playlistId/songs/:songId", wrapper.DeletePlaylistsPlaylistIdSongsSongId)

	router.Post(options.BaseURL+"/purchases/albums", wrapper.PostPurchasesAlbums)

	router.Post(options.BaseURL+"/purchases/songs", wrapper.PostPurchasesSongs)

	router.Get(options.BaseURL+"/search", wrapper.GetSearch)

	router.Get(options.BaseURL+"/search/albums", wrapper.GetSearchAlbums)

	router.Get(options.BaseURL+"/search/artists", wrapper.GetSearchArtists)

	router.Get(options.BaseURL+"/search/genres", wrapper.GetSearchGenres)

	router.Get(options.BaseURL+"/search/playlists", wrapper.GetSearchPlaylists)

	router.Get(options.BaseURL+"/search/songs", wrapper.GetSearchSongs)

	router.Get(options.BaseURL+"/songs", wrapper.GetSongs)

	router.Post(options.BaseURL+"/songs", wrapper.PostSongs)

	router.Delete(options.BaseURL+"/songs/:songId", wrapper.DeleteSongsSongId)

	router.Get(options.BaseURL+"/songs/:songId", wrapper.GetSongsSongId)

	router.Put(options.BaseURL+"/songs/:songId", wrapper.PutSongsSongId)

	router.Get(options.BaseURL+"/songs/:songId/contributors", wrapper.GetSongsSongIdContributors)

	router.Post(options.BaseURL+"/songs/:songId/contributors", wrapper.PostSongsSongIdContributors)

	router.Post(options.BaseURL+"/streams", wrapper.PostStreams)

	router.Post(options.BaseURL+"/tips", wrapper.PostTips)

	router.Get(options.BaseURL+"/users", wrapper.GetUsers)

	router.Post(options.BaseURL+"/users", wrapper.PostUsers)

	router.Delete(options.BaseURL+"/users/:userId", wrapper.DeleteUsersUserId)

	router.Get(options.BaseURL+"/users/:userId", wrapper.GetUsersUserId)

	router.Put(options.BaseURL+"/users/:userId", wrapper.PutUsersUserId)

	router.Get(options.BaseURL+"/users/:userId/library/albums", wrapper.GetUsersUserIdLibraryAlbums)

	router.Get(options.BaseURL+"/users/:userId/library/purchases", wrapper.GetUsersUserIdLibraryPurchases)

	router.Get(options.BaseURL+"/users/:userId/library/songs", wrapper.GetUsersUserIdLibrarySongs)

	router.Get(options.BaseURL+"/users/:userId/playlists", wrapper.GetUsersUserIdPlaylists)

	router.Post(options.BaseURL+"/users/:userId/playlists", wrapper.PostUsersUserIdPlaylists)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
